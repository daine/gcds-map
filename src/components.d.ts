/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface GcdsMap {
        /**
          * @default true
         */
        "controls"?: boolean;
        "controlslist"?: string;
        "extent"?: string;
        "height"?: string;
        "lat"?: number;
        "lon"?: number;
        "projection"?: string;
        "width"?: string;
        "zoom"?: number;
    }
    interface GcdsMapLayer {
        /**
          * @default false
         */
        "checked"?: boolean;
        "label"?: string;
        "opacity"?: string;
        "src": string;
    }
}
export interface GcdsMapLayerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGcdsMapLayerElement;
}
declare global {
    interface HTMLGcdsMapElement extends Components.GcdsMap, HTMLStencilElement {
    }
    var HTMLGcdsMapElement: {
        prototype: HTMLGcdsMapElement;
        new (): HTMLGcdsMapElement;
    };
    interface HTMLGcdsMapLayerElementEventMap {
        "layerchange": any;
        "layerload": any;
        "layererror": any;
    }
    interface HTMLGcdsMapLayerElement extends Components.GcdsMapLayer, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGcdsMapLayerElementEventMap>(type: K, listener: (this: HTMLGcdsMapLayerElement, ev: GcdsMapLayerCustomEvent<HTMLGcdsMapLayerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGcdsMapLayerElementEventMap>(type: K, listener: (this: HTMLGcdsMapLayerElement, ev: GcdsMapLayerCustomEvent<HTMLGcdsMapLayerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGcdsMapLayerElement: {
        prototype: HTMLGcdsMapLayerElement;
        new (): HTMLGcdsMapLayerElement;
    };
    interface HTMLElementTagNameMap {
        "gcds-map": HTMLGcdsMapElement;
        "gcds-map-layer": HTMLGcdsMapLayerElement;
    }
}
declare namespace LocalJSX {
    interface GcdsMap {
        /**
          * @default true
         */
        "controls"?: boolean;
        "controlslist"?: string;
        "extent"?: string;
        "height"?: string;
        "lat"?: number;
        "lon"?: number;
        "projection"?: string;
        "width"?: string;
        "zoom"?: number;
    }
    interface GcdsMapLayer {
        /**
          * @default false
         */
        "checked"?: boolean;
        "label"?: string;
        "onLayerchange"?: (event: GcdsMapLayerCustomEvent<any>) => void;
        "onLayererror"?: (event: GcdsMapLayerCustomEvent<any>) => void;
        "onLayerload"?: (event: GcdsMapLayerCustomEvent<any>) => void;
        "opacity"?: string;
        "src"?: string;
    }
    interface IntrinsicElements {
        "gcds-map": GcdsMap;
        "gcds-map-layer": GcdsMapLayer;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "gcds-map": LocalJSX.GcdsMap & JSXBase.HTMLAttributes<HTMLGcdsMapElement>;
            "gcds-map-layer": LocalJSX.GcdsMapLayer & JSXBase.HTMLAttributes<HTMLGcdsMapLayerElement>;
        }
    }
}
